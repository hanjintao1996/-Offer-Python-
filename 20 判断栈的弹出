输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。
假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列
但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）

思路：
用一个辅助栈，当栈顶与pop的开始不同，往里添加，当顶层与pop[0]相同，则一起弹出，
当pushV弹出完毕，则开始消去popV,继续抵消，之后退出看stack是否还有剩下的元素，有的话则不行。

        stack = []
        while popV:
            if pushV: 
                if not stack or stack[-1]!=popV[0]: 
                    stack.append(pushV.pop(0))
                    #popV.pop(0) 
                elif stack[-1] == popV[0]:
                    stack.pop()
                    popV.pop(0)
            else:
                if stack[-1] == popV[0]:
                    stack.pop()
                    popV.pop(0)
                else:
                    popV.pop(0) 
        #print(stack)
        if stack:
            return False
        else:
            return True

