把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 
例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。

思路分析：暴力法，直到下一个值小于上一个值

def minNumberInRotateArray(self, rotateArray):
        if not rotateArray:
            return 0
        else:
            for i in range(len(rotateArray)-1):
                if rotateArray[i] > rotateArray[i+1]:
                    return  rotateArray[i+1]

思路2：看到有序，应想起二分查找。比较左边与中间的值，如果相等则只能用传统方法。
若一直不等，则最后可以用二分查找得出顺序。注意最后返回的是Mid还是left的值。

def minNumberInRotateArray(self, rotateArray):
        if not rotateArray:
            return 0
        left = 0
        mid = len( rotateArray)//2
        while mid -left > 1:
            left = 0
            mid = len( rotateArray)//2
            if rotateArray[left] < rotateArray[mid]:
                rotateArray = rotateArray[mid:]
            elif rotateArray[left] > rotateArray[mid]:
                rotateArray = rotateArray[:mid+1]
            else:
                pass
                return min(rotateArray)
        #return min(rotateArray[left],rotateArray[mid])
        return rotateArray[mid]
