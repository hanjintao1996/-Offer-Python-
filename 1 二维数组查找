在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。
请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。

思路分析：首先想到暴力法，进行遍历。其次结合分布规律，每两行，开始跟最后一个元素是最大和最小的，因此每次都比较两行，确定位置后找出是否含有该数
# -*- coding:utf-8 -*-
class Solution:
    def Find(self, target, array):
        if not array:
            return False
        if not array[0]:
            return False
        lenth = len(array[0])
        for i in range(len(array)):
            if target == array[i][0]:
                return True
            elif i<len(array)-1 and target <= array[i+1][lenth-1] and target >= array[i][0]:
                for j in array[i]:
                    if j == target:
                        return True
                for j in array[i+1]:
                    if j == target:
                        return True
            elif i == len(array):
                for j in array[i-1]:
                    if j == target:
                        return True
        return False
思路2：
官方题解：
* 矩阵是有序的，从左下角来看，向上数字递减，向右数字递增，
* 因此从左下角开始查找，当要查找数字比左下角数字大时。右移
* 要查找数字比左下角数字小时，上移
 即找出分布规律，不断地缩小查找范围
